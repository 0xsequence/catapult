#define macro MAIN() = takes(0) returns(0) {
    // Check if a contract is already deployed at the target address.
    // The target address is derived from arguments in bytecode (this is a constructor).

    // Initial Stack: []
    // copy all code to memory
    codesize       // [<codesize>]
    returndatasize // [0x00, <codesize>]
    dup1           // [0x00, 0x00, <codesize>]
    codecopy       // [<codesize>]

    contract_start  // [<contract_start>]
    mload           // [<contract_start_word>]
    0x60            // [0x60, <contract_start_word>]
    shr             // [<contract>] (Extracts the 160-bit address)
    returndatasize  // [0x00, <contract>]
    dup2            // [<contract>, 0x00, <contract>]
    extcodesize     // [size, 0x00, <contract>]
    done            // [<done_pc>, size, 0x00, <contract>]
    jumpi           // Jumps to 'done' if size > 0. Stack becomes: [0x00, <contract>]

    // --- If code continues, contract does not exist. Deploy it. ---

    // Do call to factory to deploy the contract
    dup1            // [0x00, 0x00, <contract>]
    dup1            // [0x00, 0x00, 0x00, <contract>]
    data_start      // [<data_start>, 0x00, 0x00, 0x00, <contract>]
    codesize        // [<codesize>, <data_start>, 0x00, 0x00, 0x00, <contract>]
    sub             // [<creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    data_start      // [<data_start>, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    dup3            // [0x00, <data_start>, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    factory_start   // [<factory_start>, 0x00, 0x00, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    mload           // [<factory_word>, 0x00, 0x00, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    0x60            // [0x60, <salt_word>, 0x00, 0x00, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    shr             // [<factory>, 0x00, 0x00, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    gas             // [gas, <factory>, 0x00, 0x00, <creation_code_size>, 0x00, 0x00, 0x00, <contract>]
    
    call            // Pops 7 items, pushes 1. Stack: [<success_flag>, 0x00, <contract>]
    pop             // [0x00, <contract>]
    
    // Check if the deployment call was successful
    swap1           // [<contract>, 0x00]
    extcodesize     // [size, 0x00]
    done            // [<done_pc>, size, 0x00]
    jumpi           // Jumps to 'done' if size > 0. Stack becomes: [0x00]

    // If the contract is not deployed at this stage, revert
    dup1            // [0x00, 0x00]
    revert          // Halts execution, reverting all state changes.

done:
    // Path 1 (already deployed): [0x00, <contract>]
    // Path 2 (just deployed):    [0x00]
    dup1            // Path 1 stack: [0x00, 0x00...]
    return          

    // The contract ends here, this is a placeholder for the arguments
contract_start:
    pc pc pc pc pc pc pc pc pc pc
    pc pc pc pc pc pc pc pc pc
factory_start:
    pc pc pc pc pc pc pc pc pc pc
    pc pc pc pc pc pc pc pc pc
data_start:
}
